name: CI Build and Deploy Code

on: [push, pull_request]

jobs:
  job1:
    runs-on: ubuntu-latest
    environment:
      name: ci

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_HOSTNAME: localhost
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      TEST_DATABASE_NAME: ${{ secrets.TEST_DATABASE_NAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name:  Upgrade pip and install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test database (if not exists)
        run : |
          sudo apt-get install -y postgresql-client
          DB_EXISTS=$(PGPASSWORD=${{ secrets.DATABASE_PASSWORD }} psql -h localhost -U ${{ secrets.DATABASE_USERNAME }} -tAc "SELECT 1 FROM pg_database WHERE datname='${{ secrets.TEST_DATABASE_NAME }}'")
          if [ "$DB_EXISTS" != "1" ]; then
            echo "Creating test database..."
            PGPASSWORD=${{ secrets.DATABASE_PASSWORD }} psql -h localhost -U ${{ secrets.DATABASE_USERNAME }} -p 5432 -c "CREATE DATABASE ${{ secrets.TEST_DATABASE_NAME }};"
          else
            echo "Test database already exists. Skipping creation."
          fi


      - name:  Run Pytest
        run: |
          pip install pytest
          export PYTHONPATH="$PWD"
          pytest

      - name:  Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name:  Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name:  Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/expense-tracker:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name:  Print Docker Image Digest
        run: echo ${{ steps.docker_build.outputs.digest }}